;; multiplication with add and shift 
;; 2016-01-19
;; Christopher Reiterer

equ prog_start, 0000h 	  ; start address of program rom
equ data_start, 8000h 	  ; start address of data ram
;equ result_mult1, 8004h

equ data_mult2, 8008h
;equ result_mult2, 800Ch

equ data_mult3, 8010h
;equ result_mult3, 8014h

equ data_mult4, 8018h
;equ result_mult4, 801Ch

equ data_mult5, 8020h
;equ result_mult5, 8024h

equ data_mult6, 8028h
;equ result_mult6, 802Ch

equ data_mult7, 8030h
;equ result_mult7, 8034h

equ data_mult8, 8038h
;equ result_mult8, 803Ch

equ data_mult9, 8040h
;equ result_mult9, 8044h

equ data_multA, 8048h
;equ result_multA, 804Ch

equ data_multB, 8050h
;equ result_multB, 8054h

equ data_multC, 8058h
;equ result_multC, 805Ch

equ data_multD, 8060h
;equ result_multD, 8064h

equ data_multE, 8068h
;equ result_multE, 806Ch

equ data_multF, 8070h
;equ result_multF, 8074h

equ data_mult10, 8078h
;equ result_mult10, 807Ch

equ mem_dump_addr, 0ffffh

;; following all factors and the expected results are listed
org data_start
mult1_1: db 9
mult1_2: db 7
db 0
db 0
result1_h: db 0000h
result1_l: db 003Fh

org data_mult2
mult2_1: db 0
mult2_2: db 0
db 0
db 0
result2_h: db 0000h
result2_l: db 0000h

org data_mult3
mult3_1: db 0
mult3_2: db 0FFFFh
db 0
db 0
result3_h: db 0000h
result3_l: db 0000h

org data_mult4
mult4_1: db 0FFFFh
mult4_2: db 0
db 0
db 0
result4_h: db 0000h
result4_l: db 0000h

org data_mult5
mult5_1: db 0FFFFh
mult5_2: db 0FFFFh
db 0
db 0
result5_h: db 0FFFEh
result5_l: db 0001h

org data_mult6
mult6_1: db 0A0Ah
mult6_2: db 0FFFFh
db 0
db 0
result6_h: db 0A09h
result6_l: db 0F5F6h

org data_mult7
mult7_1: db 0A0A0h
mult7_2: db 0A0Ah
db 0
db 0
result7_h: db 064Ch
result7_l: db 8640h

org data_mult8
mult8_1: db 1111h
mult8_2: db 0FFFFh
db 0
db 0
result8_h: db 01110h
result8_l: db 0EEEFh

org data_mult9
mult9_1: db 12394
mult9_2: db 09243
db 0
db 0
result9_h: db 06D4h
result9_l: db 032Eh

org data_multA
multA_1: db 3490
multA_2: db 598
db 0
db 0
resultA_h: db 001Fh
resultA_l: db 0D86Ch

org data_multB
multB_1: db 28349
multB_2: db 4298
db 0
db 0
resultB_h: db 0743h
resultB_l: db 3122h

org data_multC
multC_1: db 4398
multC_2: db 24908
db 0
db 0
resultC_h: db 0687h
resultC_l: db 87A8h

org data_multD
multD_1: db 24398
multD_2: db 248
db 0
db 0
resultD_h: db 005Ch
resultD_l: db 5390h

org data_multE
multE_1: db 56809
multE_2: db 498
db 0
db 0
resultE_h: db 01AFh
resultE_l: db 0AF42h

org data_multF
multF_1: db 4598
multF_2: db 349
db 0
db 0
resultF_h: db 0018h
resultF_l: db 7C5Eh

org data_mult10
mult10_1: db 0923
mult10_2: db 1
db 0
db 0
result10_h: db 0
result10_l: db 923

org prog_start

    loadi r1, 8000h		;; start address of data
    loadi r2, 16		;; number of multiplications

loop:

    loadi r0, 16		;; number of iterations for each multiplication

    ;; initialize the result registers
    loadi r6, 0000h
    loadi r7, 0000h

    loadi r5, 0001h

    ;; load the factors for the multiplication
    load r3, r1
    add r1, r5

    load r4, r1

mult:
    
    ;; shift the operand to the right
    ;; -> if a 1 is shifted out (-> carry is set) a summation is needed
    shr r3
    loadi r5, do_add
    jumpc r5
    
    loadi r5, dont_add;
    jump r5

do_add:
    dec r0

    ;; add
    add r7, r4

    ;; and shift
    shrc r7
    shrc r6

    ;; check if all iterations for one multiplication are done
    loadi r5, 0000h
    comp r0, r5
    loadi r5, mult_finish
    jumpz r5

    loadi r5, mult
    jump r5

dont_add:
    dec r0

    ;; only shift
    shr r7
    shrc r6
    
    ;; check if all iterations for one multiplication are done
    loadi r5, 0000h
    comp r0, r5
    loadi r5, mult_finish
    jumpz r5

    loadi r5, mult
    jump r5

mult_finish:
    ;; multiplication is finished -> store the results
    loadi r5, 0001h
    add r1, r5
    store r7, r1

    add r1, r5
    store r6, r1

    ;; prepare address of the next operands
    loadi r5, 0005h
    add r1, r5

    ;; check if another multiplication has to be done
    dec r2
    loadi r5, done
    jumpz r5

    loadi r5, loop
    jump r5

done:
    ;; program finished -> dump results
    loadi r2, data_start
    loadi r5, mem_dump_addr 
    store r2, r5            ; dump memory to file
    sleep